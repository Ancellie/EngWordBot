import re
import random
import atexit

import page
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from db_manager import DatabaseManager

TOKEN = ""

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = DatabaseManager()

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç–∏–º—á–∞—Å–æ–≤–µ, –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏)
user_data = {}


def init_user_data(user_id):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id not in user_data:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –ë–î
        saved_data = db.get_user_data(user_id)

        if saved_data:
            # –Ø–∫—â–æ —î –¥–∞–Ω—ñ –≤ –ë–î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
            user_data[user_id] = saved_data
        else:
            # –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ
            user_data[user_id] = {
                'words': [],  # [(eng, ukr), ...]
                'current_index': 0
            }
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –≤ –ë–î
            db.save_user_data(user_id, user_data[user_id])


def escape_markdown_v2(text):
    """–ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è MarkdownV2"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text


def parse_word_list(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞–º–∏"""
    lines = text.strip().split('\n')
    words = []

    # –ú–æ–∂–ª–∏–≤—ñ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏
    separators = [' - ', ' ‚Äì ', ' ‚Äî ', ' | ', ' : ', ' ; ', '\t']

    for line in lines:
        line = line.strip()
        if not line:
            continue

        # –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏
        for sep in separators:
            if sep in line:
                parts = line.split(sep, 1)
                if len(parts) == 2:
                    eng = parts[0].strip()
                    ukr = parts[1].strip()
                    if eng and ukr:
                        words.append((eng, ukr))
                    break
        else:
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫, —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ–±—ñ–ª
            parts = line.split()
            if len(parts) >= 2:
                # –ü–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ - –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ, —Ä–µ—à—Ç–∞ - –ø–µ—Ä–µ–∫–ª–∞–¥
                eng = parts[0]
                ukr = ' '.join(parts[1:])
                words.append((eng, ukr))

    return words


def get_main_keyboard():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–∞", callback_data="add_words")],
        [InlineKeyboardButton("üìö –ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ", callback_data="next_word")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üóëÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞–º–∏", callback_data="manage_words")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_manage_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞", callback_data="delete_all")],
        [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ —Å–ª–æ–≤–æ", callback_data="delete_specific")],
        [InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞", callback_data="show_all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    init_user_data(user_id)

    welcome_text = """üéì –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤.

üìù –©–æ–± –ø–æ—á–∞—Ç–∏, –¥–æ–¥–∞–π —Å–ª–æ–≤–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
word - –ø–µ—Ä–µ–∫–ª–∞–¥
apple - —è–±–ª—É–∫–æ
book - –∫–Ω–∏–≥–∞

üéØ –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞:
‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ —Å–ª—ñ–≤ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è
‚Ä¢ –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º —Å–ª—ñ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è

–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É —â–æ–± –ø–æ—á–∞—Ç–∏! üëá"""

    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    init_user_data(user_id)

    data = query.data

    if data == "add_words":
        await query.edit_message_text(
            "üìù –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ —É –æ–¥–Ω–æ–º—É –∑ —Ñ–æ—Ä–º–∞—Ç—ñ–≤:\n\n"
            "word - –ø–µ—Ä–µ–∫–ª–∞–¥\n"
            "word | –ø–µ—Ä–µ–∫–ª–∞–¥\n"
            "word : –ø–µ—Ä–µ–∫–ª–∞–¥\n"
            "word –ø–µ—Ä–µ–∫–ª–∞–¥\n\n"
            "–ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞."
        )
        context.user_data['waiting_for_words'] = True

    elif data == "next_word":
        await show_next_word(query, user_id)

    elif data == "stats":
        await show_stats(query, user_id)

    elif data == "manage_words":
        await query.edit_message_text(
            "üóëÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞–º–∏:",
            reply_markup=get_manage_keyboard()
        )

    elif data == "delete_all":
        await confirm_delete_all(query, user_id)

    elif data == "confirm_delete_all":
        user_data[user_id]['words'] = []
        user_data[user_id]['current_index'] = 0

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –≤ –ë–î
        db.save_user_data(user_id, user_data[user_id])

        await query.edit_message_text(
            "‚úÖ –í—Å—ñ —Å–ª–æ–≤–∞ –≤–∏–¥–∞–ª–µ–Ω–æ!",
            reply_markup=get_main_keyboard()
        )

    elif data == "delete_specific":
        await show_words_for_deletion(query, user_id, 0)

    elif data.startswith("delete_page_"):
        page = int(data.replace("delete_page_", ""))
        await show_words_for_deletion(query, user_id, page)

    elif data == "show_all":
        await show_all_words(query, user_id, 0)

    elif data.startswith("words_page_"):
        page = int(data.replace("words_page_", ""))
        await show_all_words(query, user_id, page)

    elif data.startswith("delete_word_"):
        word_index = int(data.replace("delete_word_", ""))
        await delete_specific_word(query, user_id, word_index)

    elif data == "back_to_main":
        await query.edit_message_text(
            "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )




async def show_next_word(query, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ"""
    words = user_data[user_id]['words']

    if not words:
        await query.edit_message_text(
            "üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Å–ª—ñ–≤! –î–æ–¥–∞–π —ó—Ö —Å–ø–æ—á–∞—Ç–∫—É.",
            reply_markup=get_main_keyboard()
        )
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    current_idx = user_data[user_id]['current_index']

    word, translation = words[current_idx]

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    user_data[user_id]['current_index'] = (user_data[user_id]['current_index'] + 1) % len(words)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
    db.save_user_data(user_id, user_data[user_id])

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ", callback_data="next_word")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
    text = f"üî§ {word} - {translation}"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def show_stats(query, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    words = user_data[user_id]['words']
    total_words = len(words)

    stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üìö –í—Å—å–æ–≥–æ —Å–ª—ñ–≤: {total_words}

{f"‚ñ∂Ô∏è –ü–æ—Ç–æ—á–Ω–µ —Å–ª–æ–≤–æ: {user_data[user_id]['current_index'] + 1}/{total_words}" if total_words > 0 else ""}"""

    await query.edit_message_text(stats_text, reply_markup=get_main_keyboard())


async def confirm_delete_all(query, user_id):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ª—ñ–≤"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ", callback_data="confirm_delete_all")],
        [InlineKeyboardButton("‚ùå –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏", callback_data="manage_words")]
    ]

    await query.edit_message_text(
        f"‚ö†Ô∏è –¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π —â–æ —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ {len(user_data[user_id]['words'])} —Å–ª—ñ–≤?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )




async def delete_specific_word(query, user_id, word_index):
    """–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ —Å–ª–æ–≤–æ"""
    words = user_data[user_id]['words']

    if 0 <= word_index < len(words):
        deleted_word = words.pop(word_index)

        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        if user_data[user_id]['current_index'] >= len(words) and words:
            user_data[user_id]['current_index'] = 0

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –≤ –ë–î
        db.save_user_data(user_id, user_data[user_id])

        await query.edit_message_text(
            f"‚úÖ –°–ª–æ–≤–æ '{deleted_word[0]} - {deleted_word[1]}' –≤–∏–¥–∞–ª–µ–Ω–æ!",
            reply_markup=get_manage_keyboard()
        )
    else:
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–ª–æ–≤–∞!",
            reply_markup=get_manage_keyboard()
        )


    async def show_all_words(query, user_id, page=0):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é"""
    words = user_data[user_id]['words']

    if not words:
        await query.edit_message_text(
            "üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Å–ª—ñ–≤!",
            reply_markup=get_manage_keyboard()
        )
        return

    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    page_size = 20
    total_pages = (len(words) + page_size - 1) // page_size

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —Å–ª—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(words))

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑—ñ —Å–ª–æ–≤–∞–º–∏
    text = f"üìö **–¢–≤–æ—ó —Å–ª–æ–≤–∞ ({len(words)}):**\n"
    text += f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1}/{total_pages} (—Å–ª–æ–≤–∞ {start_idx+1}-{end_idx})\n\n"

    for i in range(start_idx, end_idx):
        word, translation = words[i]
        text += f"{i+1}. {word} - {translation}\n"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = []
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"words_page_{page-1}"))

    # –ö–Ω–æ–ø–∫–∞ ¬´–í–ø–µ—Ä–µ–¥¬ª –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"words_page_{page+1}"))

    # –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ –Ω—É–ª—è
    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –î–æ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è", callback_data="manage_words")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


    async def show_all_words(query, user_id, page=0):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é"""
    words = user_data[user_id]['words']

    if not words:
        await query.edit_message_text(
            "üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Å–ª—ñ–≤!",
            reply_markup=get_manage_keyboard()
        )
        return

    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    page_size = 20
    total_pages = (len(words) + page_size - 1) // page_size

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —Å–ª—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(words))

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑—ñ —Å–ª–æ–≤–∞–º–∏
    text = f"üìö **–¢–≤–æ—ó —Å–ª–æ–≤–∞ ({len(words)}):**\n"
    text += f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1}/{total_pages} (—Å–ª–æ–≤–∞ {start_idx+1}-{end_idx})\n\n"

    for i in range(start_idx, end_idx):
        word, translation = words[i]
        text += f"{i+1}. {word} - {translation}\n"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = []
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"words_page_{page-1}"))

    # –ö–Ω–æ–ø–∫–∞ ¬´–í–ø–µ—Ä–µ–¥¬ª –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"words_page_{page+1}"))

    # –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ –Ω—É–ª—è
    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –î–æ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è", callback_data="manage_words")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def show_words_for_deletion(query, user_id, page=0):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é"""
    words = user_data[user_id]['words']

    if not words:
        await query.edit_message_text(
            "üì≠ –£ —Ç–µ–±–µ –Ω–µ–º–∞—î —Å–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!",
            reply_markup=get_manage_keyboard()
        )
        return

    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    page_size = 10
    total_pages = (len(words) + page_size - 1) // page_size

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —Å–ª—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(words))

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    keyboard = []
    for i in range(start_idx, end_idx):
        word, translation = words[i]
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        button_text = f"‚ùå {word} - {translation}"
        if len(button_text) > 30:
            button_text = f"‚ùå {word} - {translation[:20]}..."

        keyboard.append([InlineKeyboardButton(
            button_text,
            callback_data=f"delete_word_{i}"
        )])

    # –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_page_{page-1}"))

    # –ö–Ω–æ–ø–∫–∞ ¬´–í–ø–µ—Ä–µ–¥¬ª –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"delete_page_{page+1}"))

    # –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ –Ω—É–ª—è
    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –î–æ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è", callback_data="manage_words")])

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = f"üóëÔ∏è –í–∏–±–µ—Ä–∏ —Å–ª–æ–≤–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1}/{total_pages}):\n"
    text += f"–ü–æ–∫–∞–∑–∞–Ω–æ —Å–ª–æ–≤–∞ {start_idx+1}-{end_idx} –∑ {len(words)}"

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def show_all_words(query, user_id, page=0):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é"""
    words = user_data[user_id]['words']

    if not words:
        await query.edit_message_text(
            "üì≠ –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —Å–ª—ñ–≤!",
            reply_markup=get_manage_keyboard()
        )
        return

    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    page_size = 20
    total_pages = (len(words) + page_size - 1) // page_size

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —Å–ª—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(words))

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑—ñ —Å–ª–æ–≤–∞–º–∏
    text = f"üìö **–¢–≤–æ—ó —Å–ª–æ–≤–∞ ({len(words)}):**\n"
    text += f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page+1}/{total_pages} (—Å–ª–æ–≤–∞ {start_idx+1}-{end_idx})\n\n"

    for i in range(start_idx, end_idx):
        word, translation = words[i]
        text += f"{i+1}. {word} - {translation}\n"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = []
    nav_buttons = []

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"words_page_{page-1}"))

    # –ö–Ω–æ–ø–∫–∞ ¬´–í–ø–µ—Ä–µ–¥¬ª –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"words_page_{page+1}"))

    # –î–æ–¥–∞—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ –Ω—É–ª—è
    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –î–æ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è", callback_data="manage_words")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def receive_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤"""
    if not context.user_data.get('waiting_for_words'):
        return

    user_id = update.effective_user.id
    init_user_data(user_id)

    text = update.message.text
    new_words = parse_word_list(text)

    if new_words:
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö
        user_data[user_id]['words'].extend(new_words)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –≤ –ë–î
        db.save_user_data(user_id, user_data[user_id])

        await update.message.reply_text(
            f"‚úÖ –î–æ–¥–∞–Ω–æ {len(new_words)} –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤!\n"
            f"üìö –í—Å—å–æ–≥–æ —Å–ª—ñ–≤: {len(user_data[user_id]['words'])}",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Å–ª–æ–≤–∞. –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–æ—Ä–º–∞—Ç:\n\n"
            "word - –ø–µ—Ä–µ–∫–ª–∞–¥\n"
            "apple - —è–±–ª—É–∫–æ\n"
            "book - –∫–Ω–∏–≥–∞"
        )

    context.user_data['waiting_for_words'] = False


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
    print(f"Exception while handling an update: {context.error}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–æ–±–Ω–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_words))

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    app.add_error_handler(error_handler)

    # –ó–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏
    atexit.register(db.close)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()


if __name__ == "__main__":
    main()
